[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sqlalchemy2-datatables"
description = "Python Sqlalchemy 2.0 based serverside processing for jQuery datatables."
authors = [
    {name = "R. Hannes Niedner", email = "hniedner@gmail.com"}
]
requires-python = ">=3.10"
license = "MIT"
readme = "README.md"
dependencies = [
    "sqlalchemy~=2.0.0rc3"
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Database",
    "Topic :: Database :: Front-Ends",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/coding-doc/sqlalchemy2-datatables"

[project.optional-dependencies]
dev = [
"hatchling~=1.12.2",
"pre-commit~=2.21.0",
"pytest~=7.2.0",
"pytest-cov~=4.0.0",
"black[d]~=22.12.0",
"coverage[toml]~=7.0.5",
"isort~=5.11.4",
"mypy~=0.991",
"pyupgrade~=3.3.1",
"ruff~=0.0.219",
"autoflake~=2.0.0"
]

[tool.hatch.version]
path = "src/datatables/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/datatables"]

[tool.isort]
profile = "black"
known_first_party = 'datatables'
known_third_party = ["pydantic", "sqlalchemy"]
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_single_line = true
force_grid_wrap = 0
combine_as_imports = false


[tool.autoflake]
# return error code if changes are needed
check = false
# make changes to files instead of printing diffs
in-place = true
# drill down directories recursively
recursive = true
# exclude file/directory names that match these comma-separated globs
exclude = "<GLOBS>"
# by default, only unused standard library imports are removed; specify a comma-separated list of additional
# modules/packages
#imports = "<IMPORTS>"
# expand wildcard star imports with undefined names; this only triggers if there is only one star import in
# the file; this is skipped if there are any uses of `__all__` or `del` in the file
expand-star-imports = true
# remove all unused imports (not just those from the standard library)
remove-all-unused-imports = true
# exclude __init__.py when removing unused imports
ignore-init-module-imports = true
# remove all duplicate keys in objects
remove-duplicate-keys = true
# remove unused variables
remove-unused-variables = true
# print more verbose logs (larger numbers are more verbose)
#verbose = 1

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
check_untyped_defs = true


[tool.black]
color = true
line-length = 120
target-version = ['py310']
skip-string-normalization = true
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.ruff]
line-length = 120
extend-select = ['Q']
flake8-quotes = {inline-quotes = 'single', multiline-quotes = 'double'}
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    #    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
